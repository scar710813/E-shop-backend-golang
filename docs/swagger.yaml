basePath: /
definitions:
  dto.CreateProductInput:
    properties:
      name:
        type: string
      price:
        type: integer
    type: object
  dto.CreateUserINput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.GetJwtInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.GetJwtOutput:
    properties:
      access_token:
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
  entity.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: http://paolo.prodossimo.lopes@gmail.com
    name: Paolo Prodossimo Lopes
    url: http://paoloprodossimolopes.com
  description: This is a simple shop API
  license:
    name: MIT
    url: http://mit-license.org
  termsOfService: http://swagger.io/terms/
  title: GoShop
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Get all products
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a product
      parameters:
      - description: Create product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create a product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Update product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: Create user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserINput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a user
      tags:
      - users
  /users/generate-token:
    post:
      consumes:
      - application/json
      description: Get a user token
      parameters:
      - description: Get user token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetJwtInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetJwtOutput'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get a user token
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
